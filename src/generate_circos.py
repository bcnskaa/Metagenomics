# 2014 SKWoolf bcnskaa AT gmail DOT com

import os.path
import sys
import getopt
from collections import defaultdict


# Require biopython
# To run this script, path to biopython libraries has to be included in PYTHONPATH
from Bio import SeqIO
from Bio.Seq import Seq





# Path to circos
CIRCOS_HOME="~/tools/circos/"



def main(argv):
    print("")  



def generate_conf():
    print("Generating configuration file...")



def generate_karyotype():
    print("Generating configuration file...")



# Print the usage of this script 
def print_usage():
    print("A utility for generating Circos diagram.")
    print(" ")
    print("Usage:")
    print(" python " + sys.argv[0] + " READ_1.fq READ_2.fq [OUTPUT_PREFIX]")
    #print("  python -i BLAST-RESULT-INFILE -o FILTER-OUTFILE [-q] [-b BITSCORE-CUTOFF] [-l ALIGNMENT-LENGTH-CUTOFF] [-p PERCENTAGE-IDENTITY]")
    #print("      -i STRING  Input file generated by BLAST with -m6 option")
    print(" ")
    print(" ") 
    print("Ver 0.2b")
    


# Print status
def print_status(msg):
    caller_name = inspect.stack()[1][3]
    msg = "[ " + caller_name + " ] " + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "  " + msg
    print(msg)



"""
 Extract 
"""
def extract_link(blast_fn):
    blast_res = SearchIO.index(blast_fn, "blast-xml")
    for key in blast_res.keys():
        res = blast_res[key]
        if len(res.hits) > 0:
            for hit in res.hits:
                print "hit:"
                for hsp in hit.hsps:
                    range = hsp.query_range[1] - hsp.query_range[0]
                    if range > 100:
                        print hsp.query_id + "@" + str(hsp.query_range[0]) + "-" + str(hsp.query_range[1]) + "\t" + hsp.hit_id + "@" + str(hsp.hit_range[0]) + "-" + str(hsp.hit_range[1]) + "\t" + str(range)




# Invoke the main function
if __name__ == "__main__":
    main(sys.argv[1:])