import os.path
import sys
import operator
import math


"""
BlastRes is a python class storing one row/result generated by BLAST program (with -m8 option)  

NCBI -m8 format
array position    field
0    query name
1    subject name
2    percent identities
3    aligned length
4    number of mismatched positions
5    number of gap positions
6    query sequence start
7    query sequence end
8    subject sequence start
9    subject sequence end
10    e-value
11    bit score
"""
class BlastRes(object):
    QueryID = None
    SubjectID = None
    AlignmentIdentity = 0.0
    AlignmentLength = 0
    Mismatch = 0
    Gap = 0
    QueryStart = 0
    QueryEnd = 0
    SubjectStart = 0
    SubjectEnd = 0
    EValue = None
    BitScore = 0


    # BlastRes constructor
    # Input: blastres one row of -m8 tabular BLAST results
    def __init__(self, res):
        items = (res.replace("\n","")).split("\t")
        self.QueryID = items[0]
        self.SubjectID = items[1]
        self.AlignmentIdentity = float(items[2])
        self.AlignmentLength = int(items[3])
        self.Mismatch = int(items[4])
        self.Gap = int(items[5])
        self.QueryStart = int(items[6])
        self.QueryEnd = int(items[7])
        self.SubjectStart = int(items[8])
        self.SubjectEnd = int(items[9])
        self.EValue = items[10]
        self.BitScore = float(items[11])
      
    """
    ======== List of getter and setter functions
    """
    def getQueryID(self):
        return self.QueryID
    
    def getSubjectID(self):
        return self.SubjectID
    
    def getAlignmentIdentity(self):
        return self.AlignmentIdentity
    
    def getAlignmentLength(self):
        return self.AlignmentLength
    
    def getMismatch(self):
        return self.Mismatch
    
    def getGap(self):
        return self.Gap
    
    def getQueryStart(self):
        return self.QueryStart
    
    def getQueryEnd(self):
        return self.QueryEnd
    
    def getSubjectStart(self):
        return self.SubjectStart
    
    def getSubjectEnd(self):
        return self.SubjectEnd
    
    def getEValue(self):
        return self.EValue
    
    def getBitScore(self):
        return self.BitScore

    def getSubjectLength(self):
        return math.fabs(self.SubjectEnd - self.SubjectStart)

    def getQueryLength(self):
        return math.fabs(self.QueryEnd - self.QueryStart)



#     def parse(cls, blast_infn):
#         # A list of blast results
#         blast_ress = []
#         res = ""
#         print "Reading from", blast_infn
#        
#         # infile name should be a tab-delimited 
#         with open(blast_infn, "r") as IN:
#             #data = IN.read()
#             #print len(data)
#             while res in IN:
#                 print res, "."
#                 blast_ress.extend(BlastRes(res.replace("\n", "")))
#                  
#         return blast_ress

    
# 
# def parse(blast_infn):
#     # A list of blast results
#     blast_ress = []
# 
#     print "Reading from", blast_infn
#       
#     # infile name should be a tab-delimited 
#     with open(blast_infn, "r") as IN:
#         #data = IN.read()
#         #print len(data)
#         while line in IN:
#             print line
#             blast_ress.extend(BlastRes(line.replace("\n", "")))
#                 
#     return blast_ress
# 
# def getSubjectIDs(blastres):
#     subject_ids = [res[1] for res in blastres]
#     return subject_ids
#     
# def getQueryIDs(blastres):
#     query_ids = [res[0] for res in blastres]
#     return query_ids
#     


    
"""
    A lightweight parser for blast -m8 result
"""
class BlastParser(object):
     
    # Input: filename of blast results
    # Output: A list of BlastRes objects
    def parse(cls, blast_infn):
        # A list of blast results
        blast_ress = []
        res = ""
        print "Reading from", blast_infn
        
        f = open(blast_infn, "r")
        for l in f:
            blast_ress.extend(BlastRes(res.replace("\n", "")))
        f.close()
        
#         # infile name should be a tab-delimited 
#         with open(blast_infn, "r") as IN:
#             #data = IN.read()
#             #print len(data)
#             while res in IN:
#                 print res, "."
#                 blast_ress.extend(BlastRes(res.replace("\n", "")))
#                   
        return blast_ress
 
    def getSubjectIDs(cls, blastres):
        subject_ids = [res[1] for res in blastres]
        return subject_ids
     
    def getQueryIDs(cls, blastres):
        query_ids = [res[0] for res in blastres]
        return query_ids

    parse = classmethod(parse)
    getQueryIDs = classmethod(getQueryIDs)
    getSubjectIDs = classmethod(getSubjectIDs)
    

"""
    For filtering BlastRes objects
"""     
# class BlastFilter(object):
#     
#     def __init__(self):
#         return
#     
#     # Input: filename of blast results
#     # Output: A list of BlastRes objects
#     def parse(cls, blast_ress):
#         # A list of blast results
#         filtered_blast_ress = []
#         
#         return filtered_blast_ress           
